{"version":3,"sources":["Cell.jsx","helpers.js","GameField.jsx","Games/XO.js","serviceWorker.js","index.js"],"names":["Cell","onHover","e","props","value","target","classList","add","onHoverOff","remove","onClick","clickHandler","nextProps","nextState","this","console","log","i","className","style","width","height","onMouseOver","onMouseOut","onFocus","onBlur","React","Component","createMatrix","size","fill","arr","j","GameField","onCellClickHandler","row","col","player","state","isX","gameField","setState","newStaneGameField","map","newRow","newRowIndex","newCell","newColIndex","symbol","winSize","length","endPointChecking","fieldRow","diagonalRightDown","cols","rows","fieldCol","alert","checkWinner","renderGameField","fieldSize","cells","rowIndex","cellValue","colIndex","key","cellWidth","createMatix","gameFieldStyles","Fragment","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.6c2f5773.chunk.js","sourcesContent":["import React from 'react';\r\nimport './Cell.css';\r\n\r\n\r\nexport default class Cell extends React.Component {\r\n\r\n  shouldComponentUpdate(nextProps, nextState) {\r\n    if (nextProps.value !== this.props.value) return true;\r\n    return false;\r\n  }\r\n\r\n  onHover = (e) => {\r\n    if (!this.props.value) e.target.classList.add(\"empty-cell-focused\");\r\n  }\r\n\r\n  onHoverOff = (e) => {\r\n    e.target.classList.remove(\"empty-cell-focused\");\r\n  }\r\n\r\n  onClick = (e) => {\r\n    this.props.clickHandler();\r\n    e.target.classList.remove(\"empty-cell-focused\");\r\n  }\r\n\r\n  render() {\r\n    console.log('render Cell ' + this.props.i)\r\n\r\n\r\n    return (\r\n      <button className=\"cell\" style={{ width: '80px', height: '80px' }} onClick={this.onClick} onMouseOver={this.onHover} onMouseOut={this.onHoverOff} onFocus={this.onHover} onBlur={this.onHoverOff} >\r\n        {this.props.value}\r\n      </button>\r\n    )\r\n  }\r\n}","export default function createMatrix(size, fill) {\r\n  let arr = [];\r\n  fill = fill || null;\r\n  for (let i = 0; i < size; i++) {\r\n    arr[i] = [];\r\n    for (let j = 0; j < size; j++) {\r\n      arr[i][j] = fill;\r\n    }\r\n  }\r\n  return arr;\r\n}","import React, { Component } from 'react';\r\nimport './GameField.css';\r\nimport Cell from './Cell';\r\nimport createMatix from './helpers';\r\nimport { checkWinner } from './Games/XO'\r\n\r\nexport default class GameField extends Component {\r\n  constructor(props) {\r\n    super(props)\r\n    this.cells = 6;\r\n    this.state = {\r\n      cellWidth: 80,\r\n      gameField: createMatix(this.cells),\r\n      isX: true,\r\n    }\r\n  }\r\n\r\n  render() {\r\n    const { cellWidth, gameField } = this.state;\r\n    console.log(gameField);\r\n    const gameFieldStyles = {\r\n      width: `${this.cells * cellWidth}px`,\r\n      height: `${this.cells * cellWidth}px`,\r\n    }\r\n    return (\r\n      <React.Fragment>\r\n        <div className=\"Gamefield\" style={gameFieldStyles}>\r\n          {this.renderGameField()}\r\n        </div>\r\n      </React.Fragment>\r\n    )\r\n  }\r\n\r\n  onCellClickHandler = (row, col) => {\r\n    const player = this.state.isX ? 'X' : 'O'\r\n    if (this.state.gameField[row][col]) return;\r\n    this.setState(state => {\r\n      let newStaneGameField = state.gameField.map(function (newRow, newRowIndex) {\r\n        if (newRowIndex !== row) return newRow;\r\n        return newRow.map(function (newCell, newColIndex) {\r\n          if (newColIndex !== col) return newCell;\r\n          return player;\r\n        })\r\n      })\r\n      console.log(checkWinner(newStaneGameField, player));\r\n      return { gameField: newStaneGameField }\r\n    })\r\n\r\n    // this.setState({ isX: !this.state.isX })\r\n  }\r\n\r\n  renderGameField = () => {\r\n    const { gameField } = this.state;\r\n    const fieldSize = this.cells;\r\n    const clickHandler = this.onCellClickHandler;\r\n    return gameField.map(function (row, rowIndex) {\r\n      return row.map(function (cellValue, colIndex) {\r\n        return (<Cell key={rowIndex * fieldSize + colIndex}\r\n          value={cellValue}\r\n          i={rowIndex * fieldSize + colIndex}\r\n          clickHandler={() => clickHandler(rowIndex, colIndex)} />)\r\n      })\r\n    })\r\n  }\r\n}\r\n\r\n","export function checkWinner(gameField, symbol) {\r\n  const winSize = gameField.length === 3 ? 3 : 4\r\n  const endPointChecking = gameField.length === 3 ? 0 : gameField.length - winSize;\r\n  for (let i = 0; i <= endPointChecking; i++) {\r\n    for (let j = 0; j <= endPointChecking; j++) {\r\n      console.log(i, j)\r\n      for (let fieldRow = 0; fieldRow < 4; fieldRow++) {\r\n        let diagonalRightDown = true;\r\n        // let diagonalLeftUp = true;\r\n        let cols = true;\r\n        let rows = true;\r\n        for (let fieldCol = 0; fieldCol < 4; fieldCol++) {\r\n\r\n          diagonalRightDown &= (gameField[fieldCol + i][fieldCol + j] === symbol);\r\n          // diagonalLeftUp &= (gameField[winSize - fieldCol - 1][fieldCol] === symbol);\r\n          cols &= (gameField[fieldRow + i][fieldCol + j] === symbol);\r\n          rows &= (gameField[fieldCol + j][fieldRow + i] === symbol);\r\n\r\n\r\n        }\r\n\r\n        if (diagonalRightDown ||\r\n          cols || rows) { alert(\"winner\"); return true; }\r\n      }\r\n    }\r\n  }\r\n  // console.log(\"row \" + rows)\r\n  // console.log(\"col \" + cols)\r\n  return false\r\n}\r\n\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\n\nimport GameField from './GameField';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<GameField />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}