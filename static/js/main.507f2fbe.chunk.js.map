{"version":3,"sources":["Cell.jsx","GameField.jsx","serviceWorker.js","index.js"],"names":["Cell","onHover","e","props","value","target","classList","add","onHoverOff","remove","onClick","clickHandler","nextProps","nextState","this","console","log","i","className","style","width","height","onMouseOver","onMouseOut","onFocus","onBlur","React","Component","GameField","onCellClickHandler","player","state","isX","gameField","setState","slice","cells","cellWidth","Array","fill","gameFieldStyles","Fragment","map","cell","key","bind","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"mTAGqBA,G,uNAOnBC,QAAU,SAACC,GACJ,EAAKC,MAAMC,OAAOF,EAAEG,OAAOC,UAAUC,IAAI,uB,EAGhDC,WAAa,SAACN,GACZA,EAAEG,OAAOC,UAAUG,OAAO,uB,EAG5BC,QAAU,SAACR,GACT,EAAKC,MAAMQ,eACXT,EAAEG,OAAOC,UAAUG,OAAO,uB,qFAfNG,EAAWC,GAC/B,OAAID,EAAUR,QAAUU,KAAKX,MAAMC,Q,+BAqBnC,OAHAW,QAAQC,IAAI,eAAiBF,KAAKX,MAAMc,GAItC,4BAAQC,UAAU,OAAOC,MAAO,CAAEC,MAAO,OAAQC,OAAQ,QAAUX,QAASI,KAAKJ,QAASY,YAAaR,KAAKb,QAASsB,WAAYT,KAAKN,WAAYgB,QAASV,KAAKb,QAASwB,OAAQX,KAAKN,YACnLM,KAAKX,MAAMC,OAAS,0BAAMc,UAAU,YAAYJ,KAAKX,MAAMC,Y,GA1BlCsB,IAAMC,YCCnBC,E,YACnB,WAAYzB,GAAQ,IAAD,8BACjB,4CAAMA,KA8BR0B,mBAAqB,SAACZ,GACpB,IAAMa,EAAS,EAAKC,MAAMC,IAAM,IAAM,IAClC,EAAKD,MAAME,UAAUhB,IACzB,EAAKiB,SAAS,SAAAH,GAAK,MAAK,CACtBE,UAAU,GAAD,mBAAMF,EAAME,UAAUE,MAAM,EAAGlB,IAA/B,CAAmCa,GAAnC,YAA8CC,EAAME,UAAUE,MAAMlB,EAAI,KACjFe,KAAMD,EAAMC,QAlCd,EAAKI,MAAQ,EACb,EAAKL,MAAQ,CACXM,UAAW,GACXJ,UAAWK,MAAM,EAAKF,MAAQ,EAAKA,OAAOG,KAAK,IAC/CP,KAAK,GANU,E,sEAWT,IAAD,SAC0BlB,KAAKiB,MAA9BM,EADD,EACCA,UAAWJ,EADZ,EACYA,UACbO,EAAkB,CACtBpB,MAAM,GAAD,OAAKN,KAAKsB,MAAQC,EAAlB,MACLhB,OAAO,GAAD,OAAKP,KAAKsB,MAAQC,EAAlB,OAER,OACE,kBAAC,IAAMI,SAAP,KACE,yBAAKvB,UAAU,YAAYC,MAAOqB,GAC/BP,EAAUS,IAAI,SAACxC,EAAGyC,GAAJ,OACb,kBAAC,EAAD,CAAMC,IAAKD,EACTvC,MAAOF,EACPe,EAAG0B,EACHhC,aAAc,EAAKkB,mBAAmBgB,KAAK,EAAMF,a,GAzBxBhB,aCQnBmB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASC,OAAO,kBAAC,EAAD,MAAeC,SAASC,eAAe,SD0HjD,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.507f2fbe.chunk.js","sourcesContent":["import React from 'react';\r\nimport './Cell.css';\r\n\r\nexport default class Cell extends React.Component {\r\n\r\n  shouldComponentUpdate(nextProps, nextState) {\r\n    if (nextProps.value !== this.props.value) return true;\r\n    return false;\r\n  }\r\n\r\n  onHover = (e) => {\r\n    if (!this.props.value) e.target.classList.add(\"empty-cell-focused\");\r\n  }\r\n\r\n  onHoverOff = (e) => {\r\n    e.target.classList.remove(\"empty-cell-focused\");\r\n  }\r\n\r\n  onClick = (e) => {\r\n    this.props.clickHandler();\r\n    e.target.classList.remove(\"empty-cell-focused\");\r\n  }\r\n\r\n  render() {\r\n    console.log('render Cell ' + this.props.i)\r\n\r\n\r\n    return (\r\n      <button className=\"cell\" style={{ width: '80px', height: '80px' }} onClick={this.onClick} onMouseOver={this.onHover} onMouseOut={this.onHoverOff} onFocus={this.onHover} onBlur={this.onHoverOff} >\r\n        {this.props.value && <span className='xo-value'>{this.props.value}</span>}\r\n      </button>\r\n    )\r\n  }\r\n}","import React, { Component } from 'react';\r\nimport './GameField.css';\r\nimport Cell from './Cell'\r\n\r\nexport default class GameField extends Component {\r\n  constructor(props) {\r\n    super(props)\r\n    this.cells = 3;\r\n    this.state = {\r\n      cellWidth: 80,\r\n      gameField: Array(this.cells * this.cells).fill(''),\r\n      isX: true,\r\n    }\r\n  }\r\n\r\n\r\n  render() {\r\n    const { cellWidth, gameField } = this.state;\r\n    const gameFieldStyles = {\r\n      width: `${this.cells * cellWidth}px`,\r\n      height: `${this.cells * cellWidth}px`,\r\n    }\r\n    return (\r\n      <React.Fragment>\r\n        <div className=\"Gamefield\" style={gameFieldStyles}>\r\n          {gameField.map((e, cell) => (\r\n            <Cell key={cell}\r\n              value={e}\r\n              i={cell}\r\n              clickHandler={this.onCellClickHandler.bind(this, cell)} />\r\n          ))}\r\n        </div>\r\n      </React.Fragment>\r\n    )\r\n  }\r\n\r\n  onCellClickHandler = (i) => {\r\n    const player = this.state.isX ? 'X' : 'O'\r\n    if (this.state.gameField[i]) return;\r\n    this.setState(state => ({\r\n      gameField: [...state.gameField.slice(0, i), player, ...state.gameField.slice(i + 1)],\r\n      isX: !state.isX,\r\n    }))\r\n  }\r\n}\r\n\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\n\nimport GameField from './GameField';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<GameField />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}